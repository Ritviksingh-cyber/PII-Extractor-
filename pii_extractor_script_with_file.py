# -*- coding: utf-8 -*-
"""PII Extractor Script/ with file

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KpstQFTawcyALwerS6jpBFW9lJj4_u38
"""

import re
import os
from typing import Dict, List

# Define common PII patterns using Regular Expressions (regex).
# NOTE: These are basic patterns and may not catch all variations or might have false positives.
PII_PATTERNS = {
    "Email Address": r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}",
    # Matches Indian mobile numbers (10 digits, optionally prefixed by +91, 0, or space/hyphen)
    "Phone Number (IN)": r"(?:(?:\+|0{0,2})91[\s\-]?)?[6789]\d{9}",
    # Indian Aadhaar Number (12 digits, often spaced as XXXX XXXX XXXX, or continuous/hyphenated)
    "Aadhaar Number (IN)": r"\d{4}[\s-]?\d{4}[\s-]?\d{4}",
    # Matches a basic IP Address (e.g., 192.168.1.1)
    "IP Address": r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}",
    # Matches basic dates (MM/DD/YYYY or DD-MM-YYYY) - could be PII depending on context
    "Date (Common Format)": r"\d{1,2}[-/]\d{1,2}[-/]\d{2,4}",
}

def find_pii(text: str) -> Dict[str, List[str]]:
    """
    Scans the provided text for patterns of Personally Identifiable Information (PII).

    Args:
        text: The string of text to scan.

    Returns:
        A dictionary where keys are PII categories (e.g., "Email Address")
        and values are a list of unique matches found for that category.
    """
    found_pii = {}

    for pii_type, pattern in PII_PATTERNS.items():
        # Use re.findall to find all non-overlapping matches
        matches = re.findall(pattern, text)

        if matches:
            # Store only unique matches for cleaner output
            found_pii[pii_type] = sorted(list(set(matches)))

    return found_pii

def main():
    """
    Main function to run the PII extraction tool. Now reads text from a file.
    """
    print("--- Relyance AI PII Inspector (Local Scan) ---")

    # -------------------------------------------------------------------------
    # 1. Load the text to scan from a file.
    # Specify the file name here. Ensure 'sample_data.txt' is in the same directory.
    # -------------------------------------------------------------------------
    file_path = "sample_data.txt"
    text_to_scan = ""

    try:
        # Read the entire content of the file
        with open(file_path, 'r', encoding='utf-8') as f:
            text_to_scan = f.read()
    except FileNotFoundError:
        print(f"\n🚨 ERROR: The input file '{file_path}' was not found.")
        print("Please ensure this file is created in the same directory as the script.")
        return
    except Exception as e:
        print(f"\n🚨 ERROR: An unexpected error occurred while reading the file: {e}")
        return

    # Check if file is empty or only contains whitespace
    if not text_to_scan.strip():
        print(f"\n⚠️ WARNING: The file '{file_path}' is empty or contains only whitespace. Nothing to scan.")
        return

    print(f"\nScanning text loaded from: '{file_path}' (Total {len(text_to_scan.split())} words):\n{'-'*30}")
    # Print the content loaded from the file
    print(text_to_scan)
    print(f"{'-'*30}\n")

    # Perform the scan
    results = find_pii(text_to_scan)

    # -------------------------------------------------------------------------
    # 2. Display the results
    # -------------------------------------------------------------------------
    if results:
        print("✅ PII Detection Summary:\n")
        for pii_type, matches in results.items():
            print(f"  [{pii_type} - {len(matches)} found]:")
            for match in matches:
                # Print the match and obscure part of it for security demonstration
                if len(match) > 10:
                    # Obscure for safety, showing only the start and end
                    display_match = match[:3] + '...' + match[-4:]
                else:
                    display_match = match
                print(f"    - {display_match} (Full match: {match})")
            print()
    else:
        print("🎉 No common PII patterns found in the text.")

if __name__ == "__main__":
    main()